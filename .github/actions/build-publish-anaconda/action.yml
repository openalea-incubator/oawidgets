name: 'build-publish-anaconda'
description: 'Build and Publish anaconda package'
author: 'Thomas Arsouze'
branding:
  icon: 'package'  
  color: 'green'
inputs:
  conda:
    description: "Directory with conda recipe. Default `.` ."
    required: false
    default: '.'
  mamba:
    description: "Uses mamba to setup miniconda and install in a faster way or not. Uses the latest available version. Default `false`."
    required: false
    default: 'false'
  python:
    description: 'Python3 minor version used for building. Default `9`.'
    required: false
    default: '9'
  token:
    description: 'Anaconda access Token (required)'
    required: true
  channels:
    description: 'Optional Extra anaconda channels to use. Coma-separated syntax. Default `conda-forge`.'
    required: false
    default: 'conda-forge'
  publish:
    description: 'Wether we publish the package build on anaconda cloud or not. Default `true`.'
    required: false
    default: 'true'
  label:
    description: Label of conda package published. Default `main`.
    required: false
    default: main
runs:
  using: "composite"
  steps:
    - name: Check if meta.yml exists in ${{ inputs.conda }} directory
      id: check-meta
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Checking the conda directory if the file meta.yaml exists"
        if [ ! -f meta.yaml ]; then
           echo "A meta.yaml file with the compilation instructions of the conda package was not found in ${{ inputs.conda }}."
           exit 1
        else
           echo "A meta.yaml file with the compilation instructions of the conda package was found in ${{ inputs.conda }}."
        fi
        echo "::endgroup::"
      shell: bash
    - name: Setup Conda environment
      uses: conda-incubator/setup-miniconda@v2
      if: ${{ inputs.mamba }} != true
      with:
        python-version: 3.${{ inputs.python }}
        channels: ${{ inputs.channels }}
        auto-update-conda: false
    - name: Setup Mamba environment
      uses: conda-incubator/setup-miniconda@v2
      if: ${{ inputs.mamba }} == true
      with:
        python-version: 3.${{ inputs.python }}
        channels: ${{ inputs.channels }}
        auto-update-conda: false
        mamba-version: "*"                
    - run: conda install conda-build anaconda-client
      shell: bash -l {0}
    - name: Package compilation
      id: package-compilation
      working-directory: ./${{ inputs.conda }}
      run: | 
        echo "::group::Conda packages building"
        echo "Associate numpy version to python version provided"
        PYTHON_VERSION="3.${{ inputs.python }}"
        if [ ${PYTHON_VERSION}=="3.7" ]; then
          NUMPY_VERSION="1.11"
          echo "Set numpy version to ${NUMPY_VERSION}"
        elif [ ${PYTHON_VERSION}=="3.8" ]; then
          NUMPY_VERSION="1.16"
          echo "Set numpy version to ${NUMPY_VERSION}"
        elif [ ${PYTHON_VERSION}=="3.9" ]; then
          NUMPY_VERSION="1.19"
          echo "Set numpy version to ${NUMPY_VERSION}"
        else
          echo "Unable to build the package with this version of python (yet). Please choose a subversion of Python3: 7, 8 or 9"
          exit 1
        fi
        out_dir=`mktemp -d conda-build-dir.XXXXXX`
        echo "Running 'conda build' with python ${PYTHON_VERSION} and numpy ${NUMPY_VERSION}"  
        conda build . --output-folder $out_dir --python=${PYTHON_VERSION} --numpy=${NUMPY_VERSION}
        echo "::set-output name=out_dir::'$out_dir'"
        echo "::endgroup::"        
      shell: bash -l {0}
    - name: Package uploading
      id: package-uploading
      if: ${{ inputs.publish == 'true' }}
      working-directory: ./${{ inputs.conda }}
      run: | 
        echo "::group::Conda packages uploading"
        export ANACONDA_API_TOKEN=${{ inputs.token }}
        for BUILD_FILE in ${{ steps.package-compilation.outputs.out_dir }}/*/*; do
          if [ "${BUILD_FILE: -8}" == ".tar.bz2" ]; then
            echo "Upload package ${BUILD_FILE} to anaconda with label ${{ inputs.label }} on channel associated to the given token."
            anaconda upload --skip-existing --no-progress --label ${{ inputs.label }} ${BUILD_FILE}
          fi
        done
        echo "::endgroup::"   
      shell: bash -l {0}